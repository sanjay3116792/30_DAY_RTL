module SRAM8x8(
  
  input logic [7:0]din,
  input logic [2:0]addr,
  input logic clk,rst,en,
  output logic [7:0]dout
);
  
  reg [7:0]mem[7:0];
  
  always@(posedge clk or posedge rst)begin
    if(rst)begin
      dout <= 0;
    end 
    
    else begin
      if(en)begin
        mem[addr] <= din;
      end 
      else begin
        dout <= mem[addr];
        
      end 
    end 
  end 
  
endmodule 


////////////////////////////////////////////////////////////////////////////////////


class sat;
  randc bit [7:0]din;
  randc bit [2:0]addr;
  function void in(input [7:0]din,input [2:0]addr);
    this.din = din;
    this.addr = addr;
  endfunction
  constraint data{
    din inside {[0:200]};
    addr > 3'd0;
  }
endclass

module tb;
  logic [7:0]din ; logic [2:0]addr ; logic clk,rst,en ; logic [7:0]dout ;
  SRAM8x8 UUT(.din(din),.addr(addr),.clk(clk),.rst(rst),.en(en),.dout(dout));
  initial begin
    clk = 0;
    forever #5 clk = ~clk;
  end 
  initial begin
   rst  = 1;en   = 0;din  = 0;addr = 0;
    @(posedge clk);
    rst = 0;
  end 
  always@(posedge clk) begin
    sat s;
    s = new();
    s.in(din,addr);
    for(int i = 0 ; i < 10 ; i++)begin
      assert(s.randomize()) else $display("randomization fail");
      din  = s.din;
      addr = s.addr;
      en   = 1;
      @(posedge clk);
      en = 0;
      @(posedge clk);
    end 
  end 
  initial begin
    $monitor("time : %0t rst : %0b en :%0b din :%d addr : %d dout : %d ",$time,rst,en,din,addr,dout);
    repeat(50) @(posedge clk);
    $finish;
  end 
endmodule 
