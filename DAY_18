module LIFO(
  input logic [7:0]data_in,
  input logic wr_en,re_en,clk,rst,
  output logic [7:0]data_out,
  output logic full,empty);
  
  parameter depth = 16;
  
  logic [7:0]mem[0:depth-1];
  logic [4:0]count;
  logic [3:0]dptr = 0;
  
  assign full = (count  == depth);
  assign empty = (count ==  0);
  
  
  always@(posedge clk or posedge rst)begin
    if(rst)begin
      data_out <= 0;
      count <= 0;
      dptr <= 0;
    end 
    else begin
      
      if(wr_en && !full) begin
        mem[dptr] <= data_in;
        dptr <= dptr+1;
        count <= count+1;
      end 
      
      else if(re_en && !empty)begin
        dptr <= dptr-1;
        data_out <= mem[dptr-1];
        count <= count-1;
      end 
      
    end 
    
    
  end 
  
endmodule 

/////////////////////////////////////////////////////////////////////////////////////////////////

module tb;
   logic [7:0]data_in;
   logic wr_en,re_en,clk,rst;
   logic [7:0]data_out;
   logic full,empty;
   
  LIFO UUT(.data_in(data_in),.wr_en(wr_en),.re_en(re_en),.clk(clk),.rst(rst),.data_out(data_out),.full(full),.empty(empty));

  initial begin
    rst = 0;
    clk = 0;
    wr_en = 0;
    re_en = 0;
  end
  
  initial begin 
    forever #5 clk = ~clk;
    end
    
    initial begin
      rst = 1; 
      #10 ;
      rst = 0;
      #10;
      for(int i=0;i<16;i++)begin
      @(posedge clk);
        data_in = $urandom_range(0,225);
      wr_en = 1;
      end 
      @(posedge clk);
      wr_en = 0;
      
      for(int j=0;j<16;j++)begin
        @(posedge clk);
        re_en = 1;
      end 
      @(posedge clk);
      re_en = 0;
      #20 $finish;
    end
  initial begin
    $monitor("time %0t rst %0b wr_en %0b re_en %0b data_in %0d data_out %0d full %0b empty %0b",$time,rst,wr_en,re_en,data_in,data_out,full,empty);
  end 
     


endmodule
