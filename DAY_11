module SEQUENCE_DETECTOR(
  input logic data_in,
  input logic clk,rst,
  output logic out
);

typedef enum logic [1:0] { 
s0 ,
s1 ,
s2 ,
s3 
}s;

s present_state,next_state;
  
always_ff@(posedge clk)begin
  if(rst)begin
present_state <= s0;
end 
else begin
  present_state <= next_state;
end 
  end 
  
always_comb begin

case (present_state)
s0 : next_state = (data_in == 1) ? s1 : s0;
s1 : next_state = (data_in == 0) ? s2 : s1;
s2 : next_state = (data_in == 1) ? s3 : s2;
s3 : next_state = s0;
  default: next_state = s0;
endcase
end

   
  always_comb begin
    case (present_state) 
      s3 : out = 1'b1;
      default : out = 1'b0;
    endcase
    
  end
endmodule

///////////////////////////////////////////////////////////////

module SEQ_DETE_TB();
  logic data_in;
  logic clk;
  logic rst;
  logic out;
  
  SEQUENCE_DETECTOR UUT(.clk(clk),.rst(rst),.data_in(data_in),.out(out));
  
  initial begin 
    clk = 0; 
    forever #5 clk = ~clk;
  end 
  initial begin
    data_in = 0;
    rst = 1'b1;
    #12;
    rst = 1'b0;
   
 
     // Apply sequence: 1 0 1 (should detect)
    data_in = 1'b1; #10;
    data_in = 1'b0; #10;
    data_in = 1'b1; #10;

    // Apply sequence: 1 0 0 (should not detect)
    data_in = 1'b1; #10;
    data_in = 1'b0; #10;
    data_in = 1'b0; #10;

    // Apply sequence: 1 0 1 (should detect)
    data_in = 1'b1; #10;
    data_in = 1'b0; #10;
    data_in = 1'b1; #10;
    #20;
    $finish;
  end 
  initial begin 
  
    $monitor("TIME = %0d DATA_IN = %0b SEQUENCE DETECTED = %0s",$time,data_in,(out == 1) ? "TRUE" : "FALSE");
    $dumpfile("dump.vcd"); 
    $dumpvars;
  end 
 
endmodule
